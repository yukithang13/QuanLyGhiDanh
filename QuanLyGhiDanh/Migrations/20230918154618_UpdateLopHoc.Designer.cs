// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhanMemGhiDanh.Data;

#nullable disable

namespace QuanLyGhiDanh.Migrations
{
    [DbContext(typeof(GhiDanhDbContext))]
    [Migration("20230918154618_UpdateLopHoc")]
    partial class UpdateLopHoc
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PhanMemGhiDanh.Data.GiangVien", b =>
                {
                    b.Property<int>("IdGiangVien")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGiangVien"), 1L, 1);

                    b.Property<string>("DiachiGV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailGV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GioiTinhGV")
                        .HasColumnType("bit");

                    b.Property<string>("HoTenGV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Masothue")
                        .HasColumnType("float");

                    b.Property<string>("MonGiangDay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NgaySinhGV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SoDienThoaiGV")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdGiangVien");

                    b.ToTable("Giangviens");
                });

            modelBuilder.Entity("PhanMemGhiDanh.Data.HocVien", b =>
                {
                    b.Property<int>("IdHocVien")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHocVien"), 1L, 1);

                    b.Property<string>("DiachiHV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailHV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GioiTinhHV")
                        .HasColumnType("bit");

                    b.Property<string>("NgaySinhHV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenHV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenNguoiGiamHo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdHocVien");

                    b.ToTable("HocViens");
                });

            modelBuilder.Entity("PhanMemGhiDanh.Data.KhoaHoc", b =>
                {
                    b.Property<int>("IdKhoaHoc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdKhoaHoc"), 1L, 1);

                    b.Property<string>("TenKhoaHoc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdKhoaHoc");

                    b.ToTable("Khoahocs");
                });

            modelBuilder.Entity("PhanMemGhiDanh.Data.LopHoc", b =>
                {
                    b.Property<int>("IdLopHoc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLopHoc"), 1L, 1);

                    b.Property<string>("BatDauKetThuc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GiangvienPhuTrach")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GioHoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HocPhi")
                        .HasColumnType("int");

                    b.Property<int?>("HocVienIdHocVien")
                        .HasColumnType("int");

                    b.Property<int>("IdHocVien")
                        .HasColumnType("int");

                    b.Property<string>("MonHoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NgayHoc")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenLop")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdLopHoc");

                    b.HasIndex("HocVienIdHocVien");

                    b.ToTable("LopHocs");
                });

            modelBuilder.Entity("PhanMemGhiDanh.Data.Monhoc", b =>
                {
                    b.Property<int>("IdMonHoc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMonHoc"), 1L, 1);

                    b.Property<int?>("IdKhoaHoc")
                        .HasColumnType("int");

                    b.Property<int?>("IdNhomBoMon")
                        .HasColumnType("int");

                    b.Property<int?>("KhoahocIdKhoaHoc")
                        .HasColumnType("int");

                    b.Property<int?>("NhomBoMonIdNhomBoMon")
                        .HasColumnType("int");

                    b.Property<string>("TenMon")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMonHoc");

                    b.HasIndex("KhoahocIdKhoaHoc");

                    b.HasIndex("NhomBoMonIdNhomBoMon");

                    b.ToTable("Monhocs");
                });

            modelBuilder.Entity("PhanMemGhiDanh.Data.NhomBoMon", b =>
                {
                    b.Property<int>("IdNhomBoMon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdNhomBoMon"), 1L, 1);

                    b.Property<string>("TenNhomBoMon")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdNhomBoMon");

                    b.ToTable("NhomBoMons");
                });

            modelBuilder.Entity("PhanMemGhiDanh.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FisrtNameUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastNameUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PhanMemGhiDanh.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PhanMemGhiDanh.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhanMemGhiDanh.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PhanMemGhiDanh.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhanMemGhiDanh.Data.LopHoc", b =>
                {
                    b.HasOne("PhanMemGhiDanh.Data.HocVien", "HocVien")
                        .WithMany()
                        .HasForeignKey("HocVienIdHocVien");

                    b.Navigation("HocVien");
                });

            modelBuilder.Entity("PhanMemGhiDanh.Data.Monhoc", b =>
                {
                    b.HasOne("PhanMemGhiDanh.Data.KhoaHoc", "Khoahoc")
                        .WithMany()
                        .HasForeignKey("KhoahocIdKhoaHoc");

                    b.HasOne("PhanMemGhiDanh.Data.NhomBoMon", "NhomBoMon")
                        .WithMany()
                        .HasForeignKey("NhomBoMonIdNhomBoMon");

                    b.Navigation("Khoahoc");

                    b.Navigation("NhomBoMon");
                });
#pragma warning restore 612, 618
        }
    }
}
